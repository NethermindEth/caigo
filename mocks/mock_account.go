// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	rpc "github.com/NethermindEth/starknet.go/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountInterface is a mock of AccountInterface interface.
type MockAccountInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountInterfaceMockRecorder
}

// MockAccountInterfaceMockRecorder is the mock recorder for MockAccountInterface.
type MockAccountInterfaceMockRecorder struct {
	mock *MockAccountInterface
}

// NewMockAccountInterface returns a new instance of MockAccountInterface.
//
// It takes a gomock.Controller as a parameter and initializes a new MockAccountInterface with it.
// It returns a pointer to the newly created MockAccountInterface.
func NewMockAccountInterface(ctrl *gomock.Controller) *MockAccountInterface {
	mock := &MockAccountInterface{ctrl: ctrl}
	mock.recorder = &MockAccountInterfaceMockRecorder{mock}
	return mock
}

// EXPECT is a function that returns a pointer to a MockAccountInterfaceMockRecorder
// (allows the caller to indicate expected use).
//
// It does not take any parameters.
// It returns a pointer to a MockAccountInterfaceMockRecorder.
func (m *MockAccountInterface) EXPECT() *MockAccountInterfaceMockRecorder {
	return m.recorder
}

// Call is a method that performs some operation.
//
// It takes a context and a rpc.FunctionCall as parameters.
// It returns a slice of *felt.Felt and an error.
func (m *MockAccountInterface) Call(ctx context.Context, call rpc.FunctionCall) ([]*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, call)
	ret0, _ := ret[0].([]*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call is a function that records a call to the Call method of the MockAccountInterface interface.
//
// ctx is the context of the call.
// call is the interface representing the call.
// Returns a *gomock.Call object.
func (mr *MockAccountInterfaceMockRecorder) Call(ctx, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockAccountInterface)(nil).Call), ctx, call)
}

// TransactionHash description of the Go function.
//
// TransactionHash is a method of the MockAccountInterface struct.
// It takes two parameters: calls of type rpc.FunctionCall and txDetails of type rpc.TxDetails.
// It returns a *felt.Felt pointer and an error.
func (m *MockAccountInterface) TransactionHash(calls rpc.FunctionCall, txDetails rpc.TxDetails) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionHash", calls, txDetails)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionHash description of an expected call of TransactionHash.
//
// Parameter(s):
// - calls: interface{}.
// - txDetails: interface{}.
// Return type(s):
// - *gomock.Call.
func (mr *MockAccountInterfaceMockRecorder) TransactionHash(calls, txDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionHash", reflect.TypeOf((*MockAccountInterface)(nil).TransactionHash), calls, txDetails)
}
